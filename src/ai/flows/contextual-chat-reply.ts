// use server'

/**
 * @fileOverview implements a Genkit flow for the ContextualChatReply story.
 *
 * - contextualChatReply - A function that provides context-aware replies based on chat history.
 * - ContextualChatReplyInput - The input type for the contextualChatReply function.
 * - ContextualChatReplyOutput - The return type for the contextualChatReply function.
 */

'use server';

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ContextualChatReplyInputSchema = z.object({
  chatHistory: z.array(
    z.object({
      role: z.enum(['user', 'assistant']),
      content: z.string(),
      mediaUrl: z.string().optional(),
    })
  ).describe('The history of the chat session.'),
  userMessage: z.string().describe('The current user message.'),
  language: z.enum(['Amharic', 'English']).default('English').describe('The language for the AI response.'),
});

export type ContextualChatReplyInput = z.infer<typeof ContextualChatReplyInputSchema>;

const ContextualChatReplyOutputSchema = z.object({
  reply: z.string().describe('The AI generated reply.'),
  image_url: z.string().optional().describe('The URL of the image generated by the AI, if any.'),
});

export type ContextualChatReplyOutput = z.infer<typeof ContextualChatReplyOutputSchema>;

export async function contextualChatReply(input: ContextualChatReplyInput): Promise<ContextualChatReplyOutput> {
  return contextualChatReplyFlow(input);
}

const prompt = ai.definePrompt({
  name: 'contextualChatReplyPrompt',
  input: {schema: ContextualChatReplyInputSchema},
  output: {schema: ContextualChatReplyOutputSchema},
  prompt: `You are a helpful AI assistant engaged in a conversation. You should:

  - Provide informative and relevant responses based on the chat history.
  - Maintain coherence with the ongoing conversation.
  - Reference previous messages and any images shared to provide context-aware replies.
  - Generate an image to be included in the response if relevant to the conversation.

  Current Language: {{{language}}}

  Chat History:
  {{#each chatHistory}}
  {{#if mediaUrl}}
  {{role}}: {{{content}}} (Image: {{media url=mediaUrl}})
  {{else}}
  {{role}}: {{{content}}}
  {{/if}}
  {{/each}}

  User Message: {{{userMessage}}}

  Assistant: `,
});

const contextualChatReplyFlow = ai.defineFlow(
  {
    name: 'contextualChatReplyFlow',
    inputSchema: ContextualChatReplyInputSchema,
    outputSchema: ContextualChatReplyOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
